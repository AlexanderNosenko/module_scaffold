require 'swagger_helper'

RSpec.describe '<%= @generator.class_name %>', type: :request, rswag: true do
  let_it_be(:<%= @generator.resource_name %>) { create(:<%= @generator.resource_name %>) }
  let_it_be(:<%= @generator.route_id_param %>) { <%= @generator.resource_name %>.id }

  let(:params) do
    {
      <%= @generator.resource_name %>: attributes_for(:<%= @generator.resource_name %>)
    }
  end

  path '<%= @generator.index_route_str %>' do
    get 'List all available <%= @generator.resource_name_plural %> in a given context' do
      tags '<%= @generator.class_name %>'
      produces 'application/json'

      let_it_be(:external_<%= @generator.resource_name_plural %>) do
        create_list(:<%= @generator.resource_name %>, 1)
      end

      response 200, :ok do
        schema(<%= @generator.descriptor_class_name %>.schema(
          collection: true,
          relationships: [<%= @generator.relationship_descriptors_formatted_str %>],
          included: [<%= @generator.relationship_descriptors_formatted_str %>]
        ))

        run_test! do
          expect_json_sizes('data', ::<%= @generator.module_full_name %>.count)
          expect_json('data.?.id', <%= @generator.resource_name %>.id.to_s)
        end

      end

      context 'unauthorized user' do
        response '401', 'unauthorized' do
          schema(rswag_error_scheme)
          run_test!
        end
      end
    end

    post 'Create a <%= @generator.resource_name %>' do
      tags '<%= @generator.class_name %>'
      produces 'application/json'
      consumes 'application/json'
      parameter name: :params, in: :body, schema: <%= @generator.descriptor_class_name %>.new.request_attributes

      response 200, :ok do
        schema(<%= @generator.descriptor_class_name %>.schema(
          relationships: [<%= @generator.relationship_descriptors_formatted_str %>],
          included: [<%= @generator.relationship_descriptors_formatted_str %>]
        ))

        run_test! do
          expected_value = <%= @generator.sample_param_reference %>
          expect_json('data.attributes.<%= @generator.sample_attribute_name %>', expected_value)
        end
      end

      response 422, :unprocessable_entity do
        before { <%= @generator.sample_param_reference %> = '' }

        schema(ModuleScaffold::Descriptors::ValidationErrorDescriptor.schema)

        run_test! do
          expect_json('errors.?.source.pointer', '/data/attributes/<%= @generator.sample_attribute_name %>')
          expect_json('errors.?.detail', 'blank')
        end
      end
    end
  end

  path '<%= @generator.index_route_str %>/{<%= @generator.route_id_param %>}' do
    get 'Get details of a given <%= @generator.resource_name %>' do
      tags '<%= @generator.class_name %>'
      produces 'application/json'
      parameter name: :<%= @generator.route_id_param %>, in: :path, type: :string

      response 200, :ok do
        schema(<%= @generator.descriptor_class_name %>.schema(
          relationships: [<%= @generator.relationship_descriptors_formatted_str %>],
          included: [<%= @generator.relationship_descriptors_formatted_str %>]
        ))

        run_test! do
          expect_json('data.id', <%= @generator.resource_name %>.id.to_s)
        end
      end

      response 404, :record_not_found do
        let(:vertical_id) { 'non_existent' }

        schema(ModuleScaffold::Descriptors::RecordNotFoundErrorDescriptor.schema)
      end
    end

    patch 'Update a given <%= @generator.resource_name %>' do
      tags '<%= @generator.class_name %>'
      produces 'application/json'
      consumes 'application/json'
      parameter name: :<%= @generator.route_id_param %>, in: :path, type: :string
      parameter name: :params, in: :body, schema: <%= @generator.descriptor_class_name %>.new.request_attributes

      response 200, :ok do
        schema(<%= @generator.descriptor_class_name %>.schema(
          relationships: [<%= @generator.relationship_descriptors_formatted_str %>],
          included: [<%= @generator.relationship_descriptors_formatted_str %>]
        ))

        run_test! do
          expected_value = <%= @generator.sample_param_reference %>
          expect_json('data.attributes.<%= @generator.sample_attribute_name %>', expected_value)
        end
      end

      response 422, :unprocessable_entity do
        before { <%= @generator.sample_param_reference %> = '' }

        schema(ModuleScaffold::Descriptors::ValidationErrorDescriptor.schema)

        run_test! do
          expect_json('errors.?.source.pointer', '/data/attributes/<%= @generator.sample_attribute_name %>')
          expect_json('errors.?.detail', 'blank')
        end
      end
    end

    delete 'Destroy <%= @generator.resource_name %>' do
      tags '<%= @generator.class_name %>'
      produces 'application/json'
      consumes 'application/json'
      parameter name: :<%= @generator.route_id_param %>, in: :path, type: :string

      response 200, :ok do
        schema({})

        it 'destroys the <%= @generator.resource_name %>' do |example|
          expect do
            submit_request(example.metadata)
          end.to change { ::<%= @generator.module_full_name %>.count }.by(-1)
          assert_response_matches_metadata(example.metadata)
        end
      end
    end
  end
end
