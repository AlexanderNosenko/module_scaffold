require 'rails_helper'

describe <%= @generator.full_class_name('update') %> do
  subject { described_class.new(<%= @generator.resource_name %>, ActionController::Parameters.new(params)).call }
  let_it_be(:<%= @generator.resource_name %>) { create(:<%= @generator.resource_name %>) }
  let(:params) do
    {
      <%= @generator.resource_name %>: {
        <%= @generator.tested_attributes_formatted_str %>
      }
    }
  end

  describe '#call' do
    context 'with valid params' do
      it 'doesnt create new <%= @generator.resource_name %>' do
        expect { subject }.to change { <%= @generator.module_full_name %>.count }.by(0)
      end

      it 'updates <%= @generator.resource_name %> with correct attributes' do
        service = subject

        expect(service.success?).to eq true
        result = service.result
        expect(result).to be_a <%= @generator.module_full_name %>

        params[:<%= @generator.resource_name %>].each do |key, value|
          expect(result[key]).to eq value
        end
      end
    end

    context 'with invalid params' do
      let(:params) do
        {
          <%= @generator.resource_name %>: {
            <%= @generator.permitted_attributes.map do |attr|
              "#{attr}: nil"
            end.join(",\n") %>
          }
        }
      end

      it 'returns invalid record as error attribute' do
        service = subject

        expect(service.success?).to eq false
        expect(service.result).to eq nil
        expect(service.error).to be_a <%= @generator.module_full_name %>
        expect(service.error.valid?).to eq false
      end
    end
  end
end
