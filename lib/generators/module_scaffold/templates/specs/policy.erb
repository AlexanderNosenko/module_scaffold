require 'rails_helper'

RSpec.describe ::<%= @generator.full_class_name %>, policy: true do
  subject { described_class.new(nil, <%= @generator.resource_name %>) }
  let(:resolved_scope) { described_class::Scope.new(nil, ::<%= @generator.module_full_name %>.all).resolve }
  let_it_be(:<%= @generator.resource_name %>) { create(:<%= @generator.resource_name %>) }
  let_it_be(:external_<%= @generator.resource_name %>) { create(:<%= @generator.resource_name %>) }

  it { is_expected.to permit_actions(<%= @generator.permitted_actions %>) }

  context 'scope' do
    it 'has access to own <%= @generator.resource_name %>' do
      expect(resolved_scope).to include(<%= @generator.resource_name %>)
    end

    it 'doesnt have access other <%= @generator.resource_name_plural %>' do
      expect(resolved_scope).not_to include(external_<%= @generator.resource_name %>)
    end
  end

  specify do
    is_expected.to permit_mass_assignment_of(
      <%= @generator.permitted_attributes_formatted_str %>
    )
  end

  context 'being not authorized' do
    it { is_expected.to forbid_actions(<%= @generator.permitted_actions %>) }
  end

end
